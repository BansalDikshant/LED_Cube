#include <SPI.h>
#define dataPin 11
#define clockPin 13
#define latchPin 10
void layer3d();
void rotating();
void inc_hollow_cube();
void inc_solid_cube();
void layerBylayer();
void design1();
void setup() {
  pinMode(10,OUTPUT);
  pinMode(11,OUTPUT);
  pinMode(13,OUTPUT);
  SPI.begin();
  SPI.beginTransaction(SPISettings(8000000, LSBFIRST, SPI_MODE0));
}
void loop() {
rotating();
layer3d();
inc_hollow_cube();
layerBylayer();
design1();
D();
I();
K();
S();
H();
U();
inc_solid_cube();
}
void layer3d()
{
  int led[] = {B000000,B000000,B000000,B000000,B000000,B000000,B000000};
  for(int i=0;i<6;i++)
    {
      for(int duration=1;duration<=10;duration++)
      {
        for(int layer=0;layer<6;layer++)
        {
          if(layer==i)
          {
            bitSet(led[0],layer);
            for(int j=1;j<7;j++)
            {
              led[j]=B111111;
            }
            updateShiftReg(led);
            delay(1);
            for(int j=0;j<7;j++)
            {
              led[j]=0;
            }
            updateShiftReg(led);
          }
          else
          {
            bitSet(led[0],layer);
            for(int row=1;row<=7;row++)
            {
              if(row==(i+1))
              {
                for(int col=0;col<6;col++)
                {
                  bitSet(led[row],col);
                }
              }
              else
              {
                bitSet(led[row],i);
              }
            }
            updateShiftReg(led);
            delay(1);
            for(int j=0;j<7;j++)
            {
              led[j]=0;
            }
            updateShiftReg(led);
          }
        }
      }
    }
    for(int i=5;i>=0;i--)
    {
      for(int duration=1;duration<=10;duration++)
      {
        for(int layer=0;layer<6;layer++)
        {
          if(layer==i)
          {
            bitSet(led[0],layer);
            for(int j=1;j<7;j++)
            {
              led[j]=B111111;
            }
            updateShiftReg(led);
            delay(1);
            for(int j=0;j<7;j++)
            {
              led[j]=0;
            }
            updateShiftReg(led);
          }
          else
          {
            bitSet(led[0],layer);
            for(int row=1;row<=7;row++)
            {
              if(row==(i+1))
              {
                for(int col=0;col<6;col++)
                {
                  bitSet(led[row],col);
                }
              }
              else
              {
                bitSet(led[row],i);
              }
            }
            updateShiftReg(led);
            delay(1);
            for(int j=0;j<7;j++)
            {
              led[j]=0;
            }
            updateShiftReg(led);
          }
        }
      }
    }
}
void rotating()
{
  int led[] = {B000000,B000000,B000000,B000000,B000000,B000000,B000000};
  int rowSelect, colSelect;
  int timer=50;
  for(int layer=0;layer<6;layer++)
  {
    if(layer%2==0)
    {
    for(int i=0;i<7;i++)
    {
      led[i] = B000000;
    }
      updateShiftReg(led);
      rowSelect = 4;
      colSelect = 3;
      bitSet(led[0],layer);
      bitSet(led[rowSelect],colSelect);
      updateShiftReg(led);
      for(int counter=1;counter<=5;counter+=2)
      {
        for(int a=1;a<=counter;a++)
        {
          delay(timer);
          rowSelect--;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
        }
        for(int a=1;a<=counter;a++)
        {
          delay(timer);
          colSelect--;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
        }
        for(int a=0;a<=counter;a++)
        {
          delay(timer);
          rowSelect++;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
          if(a==5)
          break;
        }
        if(counter!=5)
        for(int a=0;a<=counter;a++)
        {
          delay(timer);
          colSelect++;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
        }
      }
    }
    else
    {
      for(int i=0;i<7;i++)
    {
      for(int j=0;j<6;j++)
      {
        bitClear(led[i],j);
      }
    }
      updateShiftReg(led);
      rowSelect = 6;
      colSelect = 0;
      bitSet(led[0],layer);
      bitSet(led[rowSelect],colSelect);
      updateShiftReg(led);
      for(int counter=5;counter>=1;counter-=2)
      {
        if(counter==5)
        {
          for(int a=1;a<=counter;a++)
          {
            delay(timer);
            rowSelect--;
            bitSet(led[rowSelect],colSelect);
            updateShiftReg(led);
          }
        }
        else
        {
          for(int a=0;a<=counter;a++)
          {
            delay(timer);
            rowSelect--;
            bitSet(led[rowSelect],colSelect);
            updateShiftReg(led);
          }
        }
        for(int a=1;a<=counter;a++)
        {
          delay(timer);
          colSelect++;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
        }
        for(int a=1;a<=counter;a++)
        {
          delay(timer);
          rowSelect++;
          bitSet(led[rowSelect],colSelect);
          updateShiftReg(led);
        }
        if(counter!=1)
        {
          for(int a=1;a<counter;a++)
          {
            delay(timer);
            colSelect--;
            bitSet(led[rowSelect],colSelect);
            updateShiftReg(led);
          }
        }
      }
    }
  }
}
void inc_hollow_cube()
{
 int led[] = {B000000,B000000,B000000,B000000,B000000,B000000,B000000};
 #define TIMER 50
 for(int layer=0;layer<6;layer++)
 {
  if(layer%2==0)
  {
    bitSet(led[0],layer);
    for(int row=1;row<=6;row++)
    {
     if(row%2!=0)
     {
      for(int col=0;col<6;col++)
      {
      bitSet(led[row],col);
      updateShiftReg(led);
      delay(TIMER);
      }
     }
     else
     {
      for(int col=5;col>=0;col--)
      {
       bitSet(led[row],col);
       updateShiftReg(led);
       delay(TIMER);
      }
     }
    }
    for(int i=0;i<7;i++)
    {
      led[i]=0;
    }
   }
   else
   {
    bitSet(led[0],layer);
    for(int row=6;row>=1;row--)
    {
     if(row%2==0)
     {
      for(int col=0;col<6;col++)
      {
      bitSet(led[row],col);
      updateShiftReg(led);
      delay(TIMER);
      }
     }
     else
     {
      for(int col=5;col>=0;col--)
      {
       bitSet(led[row],col);
       updateShiftReg(led);
       delay(TIMER);
      }
     }
    }
    for(int i=0;i<7;i++)
    {
      led[i]=0;
    }
   }
 }
}
void inc_solid_cube()
{
  int led[] = {B000000,B000000,B000000,B000000,B000000,B000000,B000000};
  for(int z=0;z<10;z++)
  {
    for(byte i=1;i<6;i++)
  {
    for(byte j=0;j<=i;j++)
    {
      for(byte k=0;k<=i;k++)
      {
        if(j!=0 && j!=i)
        {
        if(k==0 || k==i)
        bitSet(led[6-j],k);
        else
        bitClear(led[6-j],k);
        }
        else
        bitSet(led[6-j],k);
      }
    }
    for(int animationTime=0;animationTime<1500;animationTime++)
    {
      for(byte l=0;l<=i;l++)
      {
        bitSet(led[0],l);
        updateShiftReg(led);
        delayMicroseconds(1);
        bitClear(led[0],i);
        updateShiftReg(led);
      }
    }
    for(byte a=0;a<7;a++)
    {
      led[a]=B000000;
    }
    updateShiftReg(led);
  }
  for(byte i=5;i>=1;i--)
  {
    for(byte j=0;j<=i;j++)
    {
      for(byte k=0;k<=i;k++)
      {
        if(j!=0 && j!=i)
        {
        if(k==0 || k==i)
        bitSet(led[6-j],k);
        else
        bitClear(led[6-j],k);
        }
        else
        bitSet(led[6-j],k);
      }
    }
    for(int animationTime=0;animationTime<1500;animationTime++)
    {
      for(byte l=0;l<=i;l++)
      {
        bitSet(led[0],l);
        updateShiftReg(led);
        delayMicroseconds(1);
        bitClear(led[0],i);
        updateShiftReg(led);
      }
    }
    for(byte a=0;a<7;a++)
    {
      led[a]=B000000;
    }
    updateShiftReg(led);
  }
  }
}
void design1()
{
  int led[] = {B000000,B000000,B000000,B000000,B000000,B000000,B000000};
  byte rowSelect, colSelect,counter;
  for(byte i=0;i<6;i++)
  {
    bitSet(led[0],i);
    for(byte k=1;k<=6;k++)
    {
      for(byte j=0;j<6;j++)
      {
        bitSet(led[k],j);
        updateShiftReg(led);
        delay(50);
        bitClear(led[k],j);
        updateShiftReg(led);
      }
    }
    bitClear(led[0],i);
    updateShiftReg(led);
  }
}
void updateShiftReg(int animation[])
{
  digitalWrite(latchPin, LOW);
  for(byte a=0; a<7; a++)
  {
    SPI.transfer(animation[a]);
  }
  digitalWrite(latchPin, HIGH);
}
void layerBylayer()
{
  int layer[] =  {B000000,B111111,B111111,B111111,B111111,B111111,B111111};
  for(int i=0;i<10;i++)
  {
    for(int j=0;j<6;j++)
    {
      bitSet(layer[0],j);
      updateShiftReg(layer);
      delay(100);
      bitClear(layer[0],j);
      updateShiftReg(layer);
    }
  }
}
void D()
{
  const byte DRow6[6][7] PROGMEM =  {{B000001,B011100,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B011100,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte DRow5[6][7] PROGMEM =  {{B000001,B000000,B011100,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B011100,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte DRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B011100,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B011100,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte DRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B011100,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B011100,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte DRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B011100,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B011100,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte DRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B011100},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B011100},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(DRow6, 300);
 shift_out(DRow5, 300);
 shift_out(DRow4, 300);
 shift_out(DRow3, 300);
 shift_out(DRow2, 300);
 shift_out(DRow1, 300);
}
void I()
{
  const byte IRow6[6][7] PROGMEM =  {{B000001,B111110,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B111110,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte IRow5[6][7] PROGMEM =  {{B000001,B000000,B111110,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B111110,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte IRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B111110,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B111110,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte IRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B111110,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B111110,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte IRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B111110,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B111110,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte IRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B111110},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B111110},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(IRow6, 300);
 shift_out(IRow5, 300);
 shift_out(IRow4, 300);
 shift_out(IRow3, 300);
 shift_out(IRow2, 300);
 shift_out(IRow1, 300);
}
void K()
{
  const byte KRow6[6][7] PROGMEM =  {{B000001,B110011,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B010100,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B011000,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B010100,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B110011,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte KRow5[6][7] PROGMEM =  {{B000001,B000000,B110011,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B010100,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B011000,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B010100,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B110011,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte KRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B110011,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B010100,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B011000,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B010100,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B110011,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte KRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B110011,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B010100,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B011000,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B010100,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B110011,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte KRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B110011,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B010100,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B011000,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B010100,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B110011,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte KRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B110011},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B010100},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B011000},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B010100},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B110011},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(KRow6, 300);
 shift_out(KRow5, 300);
 shift_out(KRow4, 300);
 shift_out(KRow3, 300);
 shift_out(KRow2, 300);
 shift_out(KRow1, 300);
}
void S()
{
  const byte SRow6[6][7] PROGMEM =  {{B000001,B011110,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B010000,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B011110,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B000010,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B011110,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte SRow5[6][7] PROGMEM =  {{B000001,B000000,B011110,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B010000,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B011110,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B000010,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B011110,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte SRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B011110,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B010000,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B011110,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B000010,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B011110,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte SRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B011110,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B010000,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B011110,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B000010,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B011110,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte SRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B011110,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B010000,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B011110,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B000010,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B011110,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte SRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B011110},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B010000},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B011110},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B000010},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B011110},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(SRow6, 300);
 shift_out(SRow5, 300);
 shift_out(SRow4, 300);
 shift_out(SRow3, 300);
 shift_out(SRow2, 300);
 shift_out(SRow1, 300);
}
void H()
{
  const byte HRow6[6][7] PROGMEM =  {{B000001,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B011110,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte HRow5[6][7] PROGMEM =  {{B000001,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B011110,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte HRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B011110,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte HRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B011110,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte HRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B011110,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte HRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B011110},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(HRow6, 300);
 shift_out(HRow5, 300);
 shift_out(HRow4, 300);
 shift_out(HRow3, 300);
 shift_out(HRow2, 300);
 shift_out(HRow1, 300);
}
void U()
{
  const byte URow6[6][7] PROGMEM =  {{B000001,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B010010,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B001100,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte URow5[6][7] PROGMEM =  {{B000001,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B010010,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B001100,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte URow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B010010,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B001100,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte URow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B010010,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B001100,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte URow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B010010,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B001100,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte URow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B010010},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B001100},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(URow6, 300);
 shift_out(URow5, 300);
 shift_out(URow4, 300);
 shift_out(URow3, 300);
 shift_out(URow2, 300);
 shift_out(URow1, 300);
}
void A()
{
  const byte ARow6[6][7] PROGMEM =  {{B000001,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B100010,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B111110,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B100010,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B100010,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte ARow5[6][7] PROGMEM =  {{B000001,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B100010,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B111110,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B100010,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B100010,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte ARow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B100010,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B111110,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B100010,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B100010,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte ARow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B100010,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B111110,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B100010,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B100010,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte ARow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B100010,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B111110,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B100010,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B100010,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte ARow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B100010},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B111110},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B100010},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B100010},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(ARow6, 300);
 shift_out(ARow5, 300);
 shift_out(ARow4, 300);
 shift_out(ARow3, 300);
 shift_out(ARow2, 300);
 shift_out(ARow1, 300);
}
void N()
{
  const byte NRow6[6][7] PROGMEM =  {{B000001,B100010,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B110010,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B101010,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B100110,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B100010,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte NRow5[6][7] PROGMEM =  {{B000001,B000000,B100010,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B110010,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B101010,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B100110,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B100010,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte NRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B100010,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B110010,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B101010,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B100110,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B100010,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte NRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B100010,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B110010,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B101010,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B100110,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B100010,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte NRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B100010,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B110010,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B101010,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B100110,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B100010,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte NRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B100010},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B110010},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B101010},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B100110},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B100010},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(NRow6, 300);
 shift_out(NRow5, 300);
 shift_out(NRow4, 300);
 shift_out(NRow3, 300);
 shift_out(NRow2, 300);
 shift_out(NRow1, 300);
}
void T()
{
  const byte TRow6[6][7] PROGMEM =  {{B000001,B111110,B000000,B000000,B000000,B000000,B000000},
                                     {B000010,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B000100,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B001000,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B010000,B001000,B000000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte TRow5[6][7] PROGMEM =  {{B000001,B000000,B111110,B000000,B000000,B000000,B000000},
                                     {B000010,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B000100,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B001000,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B010000,B000000,B001000,B000000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte TRow4[6][7] PROGMEM =  {{B000001,B000000,B000000,B111110,B000000,B000000,B000000},
                                     {B000010,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B000100,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B001000,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B010000,B000000,B000000,B001000,B000000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte TRow3[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B111110,B000000,B000000},
                                     {B000010,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B000100,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B001000,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B010000,B000000,B000000,B000000,B001000,B000000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte TRow2[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B111110,B000000},
                                     {B000010,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B000100,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B001000,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B010000,B000000,B000000,B000000,B000000,B001000,B000000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};
  const byte TRow1[6][7] PROGMEM =  {{B000001,B000000,B000000,B000000,B000000,B000000,B111110},
                                     {B000010,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B000100,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B001000,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B010000,B000000,B000000,B000000,B000000,B000000,B001000},
                                     {B000000,B000000,B000000,B000000,B000000,B000000,B000000}};  
 shift_out(TRow6, 300);
 shift_out(TRow5, 300);
 shift_out(TRow4, 300);
 shift_out(TRow3, 300);
 shift_out(TRow2, 300);
 shift_out(TRow1, 300);
}
void completeCube(){
 const byte layer[6][7] PROGMEM  = {{0b100000,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111},
                                    {0b010000,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111},
                                    {0b001000,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111},
                                    {0b000100,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111},
                                    {0b000010,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111},
                                    {0b000001,0b111111,0b111111,0b111111,0b111111,0b111111,0b111111}};
 shift_out(layer, 600); 
}
void ClearOut(){
  digitalWrite(latchPin, LOW);
  for(byte b=0; b<7; b++){
    SPI.transfer(B000000);
  }
  digitalWrite(latchPin, HIGH);
  digitalWrite(latchPin, LOW);
}
void shift_out(const byte  animation[6][7], int animationTime){
  for(int i=0; i<(animationTime/6);i++){ 
    for(byte a=0; a<6; a++){
      digitalWrite(latchPin, LOW);
      for(byte b=0; b<7; b++){
        SPI.transfer(animation[a][b]);
      }
      digitalWrite(latchPin, HIGH);
      delay(1);
    }
  }
}
